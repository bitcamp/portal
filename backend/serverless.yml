org: bitcamp
app: portal
service: portal-backend

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: bitcamp-portal-backend-${self:provider.stage}-layers-deploymentbucket
  environment:
    PLATFORM_BASE_URL: ${file(./config/${self:provider.stage}.json):PLATFORM_BASE_URL}
    REGISTRATION_TABLE: ${file(./config/${self:provider.stage}.json):REGISTRATION_TABLE}
    TRACKING_TABLE: ${file(./config/${self:provider.stage}.json):TRACKING_TABLE}
    STATISTICS_TABLE: ${file(./config/${self:provider.stage}.json):STATISTICS_TABLE}
    SLACK_STAT_UPDATE_WEBHOOK_SECRET_NAME: ${file(./config/${self:provider.stage}.json):SLACK_STAT_UPDATE_WEBHOOK_SECRET_NAME}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*"
    - Effect: "Allow"
      Action:
        - secretsmanager:DescribeSecret
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-east-1:*"
    - Effect: "Allow"
      Action:
        - ses:SendTemplatedEmail
      Resource: "arn:aws:ses:us-east-1:*"

functions:
  register:
    handler: handler.register
    description: Receives registration information from a user
    events:
      - http: 
          path: signup
          method: post
          cors: true
    memorySize: 256
    timeout: 15
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${opt:stage}, self.provisionedConcurrency.other}
  track:
    handler: handler.track
    description: Receives registration information from a user
    events:
      - http: 
          path: track
          method: post
          cors: true
    memorySize: 128
  update:
    handler: handler.update
    description: Sends a stat update to Slack
    events:
      - schedule:
         rate: rate(8 hours)
         enabled: ${self:custom.updateEnabled.${opt:stage}, self:custom.updateEnabled.other}

resources: # define DynamoDB tables within serverless
  Resources:
    trackingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):TRACKING_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: random_id
            AttributeType: S
          - AttributeName: referral_id
            AttributeType: S
        KeySchema:
          - AttributeName: random_id
            KeyType: HASH
        GlobalSecondaryIndexes:  # we want to be able to link tracking with referral id
        - IndexName: referralsIndex
          KeySchema:
          - AttributeName: referral_id
            KeyType: HASH
          Projection:
            NonKeyAttributes:
            - name
            ProjectionType: INCLUDE
    registrationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):REGISTRATION_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: referral_id
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:  # we want to be able to get users by referral_id
        - IndexName: referralsIndex
          KeySchema:
          - AttributeName: referral_id
            KeyType: HASH
          Projection:
            NonKeyAttributes:
            - name
            ProjectionType: INCLUDE
    statisticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):STATISTICS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: statistic
            AttributeType: S
        KeySchema:
          - AttributeName: statistic
            KeyType: HASH

package:
  exclude:
    node_modules/**

plugins:
  - serverless-sentry
  - serverless-layers

custom:
  provisionedConcurrency:
    prd: 1
    other: 0
  updateEnabled:
    prd: true
    other: false
  sentry:
    dsn: ${file(./config/${self:provider.stage}.json):SENTRY_DSN}
  serverless-layers:
    dependenciesPath: ./package.json