org: bitcamp
app: portal
service: portal-backend

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: bitcamp-portal-backend-${self:provider.stage}-layers-deploymentbucket
  environment:
    PLATFORM_BASE_URL: ${file(./config/${self:provider.stage}.json):PLATFORM_BASE_URL}
    RESUMES_TABLE: ${file(./config/${self:provider.stage}.json):RESUMES_TABLE}
    REGISTRATION_TABLE: ${file(./config/${self:provider.stage}.json):REGISTRATION_TABLE}
    VOLUNTEER_TABLE: ${file(./config/${self:provider.stage}.json):VOLUNTEER_TABLE}
    TRACKING_TABLE: ${file(./config/${self:provider.stage}.json):TRACKING_TABLE}
    STATISTICS_TABLE: ${file(./config/${self:provider.stage}.json):STATISTICS_TABLE}
    SLACK_STAT_UPDATE_WEBHOOK_SECRET_NAME: ${file(./config/${self:provider.stage}.json):SLACK_STAT_UPDATE_WEBHOOK_SECRET_NAME}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:us-east-1:*"
        - Effect: "Allow"
          Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
          Resource: "arn:aws:secretsmanager:us-east-1:*"
        - Effect: "Allow"
          Action:
            - ses:SendTemplatedEmail
          Resource: "arn:aws:ses:us-east-1:*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketVersions
          Resource:
            - "arn:aws:s3:::*"

functions:
  register:
    handler: handler.register
    description: Adds a new registration to the database
    events:
      - http:
          path: register
          method: post
          cors: true
    memorySize: 256
    timeout: 15
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${opt:stage}, self:custom.provisionedConcurrency.other}
  track:
    handler: handler.track
    description: Keeps track of various user actions
    events:
      - http:
          path: track
          method: post
          cors: true
    memorySize: 128
  update:
    handler: handler.update
    description: Sends a stat update to Slack
    events:
      - schedule:
          # rate: cron(0 5/8 * * ? *) # every 8 hours
          rate: cron(0 0 1 1 ? 2024) # date in the past, disables this function
          enabled: ${self:custom.updateEnabled.${opt:stage}, self:custom.updateEnabled.other}
  upload_resume:
    handler: handler.upload_resume
    description: Uploads a hacker's resume to S3 bucket
    events:
      - http:
          path: upload_resume
          method: post
          cors: true
  upload_resume_text:
    handler: handler.upload_resume_text
    description: Upload's a hacker's resume text to DynamoDB Table
    events:
      - http:
          path: upload_text_resume
          method: post
          cors: true

resources: # define DynamoDB tables within serverless
  Resources:
    trackingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):TRACKING_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: random_id
            AttributeType: S
          - AttributeName: referral_id
            AttributeType: S
        KeySchema:
          - AttributeName: random_id
            KeyType: HASH
        GlobalSecondaryIndexes: # we want to be able to link tracking with referral id
          - IndexName: referralsIndex
            KeySchema:
              - AttributeName: referral_id
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - name
              ProjectionType: INCLUDE
      DeletionPolicy: Retain
    resumesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):RESUMES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: submitted
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: submitted
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain
    registrationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):REGISTRATION_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: referral_id
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes: # we want to be able to get users by referral_id
          - IndexName: referralsIndex
            KeySchema:
              - AttributeName: referral_id
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - name
              ProjectionType: INCLUDE
      DeletionPolicy: Retain
    statisticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./config/${self:provider.stage}.json):STATISTICS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: statistic
            AttributeType: S
        KeySchema:
          - AttributeName: statistic
            KeyType: HASH
      DeletionPolicy: Retain

package:
  exclude: node_modules/**

plugins:
  - serverless-sentry
  - serverless-layers

custom:
  provisionedConcurrency:
    prd: 1
    dev: 0
    other: 0
  updateEnabled:
    prd: true
    other: false
  sentry:
    dsn: ${file(./config/${self:provider.stage}.json):SENTRY_DSN}
  serverless-layers:
    dependenciesPath: ./package.json
